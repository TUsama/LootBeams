plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.1'
    id "me.modmuss50.mod-publish-plugin" version "0.8.1"
}
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// MixinGradle:
apply plugin: 'org.spongepowered.mixin'

group = 'com.lootbeams'
version = "${minecraft_version}-${mod_version}"

java {
    archivesBaseName = "${mod_name}"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'lootbeams'

            mods {
                lootbeams {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'lootbeams'

            mods {
                lootbeams {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'lootbeams'

            mods {
                lootbeams {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'lootbeams', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                lootbeams {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude("**/.cache")
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven {
        name = 'BlameJared Maven (CrT / Bookshelf)'
        url = 'https://maven.blamejared.com'
    }
}
configurations {
    shade.extendsFrom(minecraftLibrary)
    implementation.extendsFrom shade
}


dependencies {

    minecraft 'net.minecraftforge:forge:1.20.1-47.3.11'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'


    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    compileOnly fg.deobf("curse.maven:apotheosis-313970:5753183")
    compileOnly fg.deobf("curse.maven:placebo-283644:5414631")
    compileOnly fg.deobf("curse.maven:patchouli-306770:4966125")
    compileOnly fg.deobf("curse.maven:apothic-attributes-898963:5634071")



    implementation fg.deobf("curse.maven:library-of-exile-398780:5934664")
    implementation fg.deobf("curse.maven:mine-and-slash-reloaded-306575:5939398")
    runtimeOnly fg.deobf("curse.maven:curios-309927:5843594")
    runtimeOnly fg.deobf("curse.maven:playeranimator-658587:4587214")

    implementation fg.deobf("curse.maven:legendary-tooltips-532127:4662781")
    runtimeOnly fg.deobf("curse.maven:prism-lib-638111:4650325")
    runtimeOnly fg.deobf("curse.maven:iceberg-520110:5838149")

    minecraftLibrary "io.vavr:vavr:0.10.4"
    minecraftLibrary ("net.neoforged:bus:${neoforge_eventbus_version}") {
        exclude group: "org.ow2.asm"
        exclude group: "net.jodah"
        exclude group: "org.apache.logging.log4j"
        exclude group: "cpw.mods", module: "modlauncher"
    }


}
mixin{
    add sourceSets.main, "lootbeams.refmap.json"
    config 'lootbeams.mixins.json'
}
// Example for how to get properties into the manifest for reading at runtime.
jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "lootbeams",
                //"Specification-Vendor": "lootbeams authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "lootbeams authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}


shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    //relocate 'net.neoforged.bus', "${project.group}.relocated.net.neoforged.bus"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}


publishMods {
    file = jar.archiveFile
    changelog = file("changelog.md").text
    type = STABLE
    modLoaders.add("forge")
    curseforge {
        accessToken = file("D:\\curseforge-key.txt").text
        projectId = "1150640"
        clientRequired = true
        minecraftVersions.add("1.20.1")
    }
}


